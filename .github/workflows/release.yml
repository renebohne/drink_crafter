# GitHub Actions Workflow for Drink Crafter
#
# This workflow automates the build and release process.
# It triggers automatically whenever you push a new version tag
# (e.g., v1.0.0, v1.1.0) to your GitHub repository.
#
# The workflow will:
# 1. Build all firmware and filesystem components.
# 2. Automatically generate a manifest.json file for each board.
# 3. Create a new GitHub Release and upload the binaries as assets.
# 4. Deploy the web_flasher.html and all release assets to the 'gh-pages' branch,
#    which hosts the live web flasher.

name: Create Release and Deploy Flasher

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0, v1.1.0, etc.

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PlatformIO Core
        run: pip install -U platformio

      - name: Download Bootstrap files
        run: |
          wget https://raw.githubusercontent.com/twbs/bootstrap/v5.3.2/dist/css/bootstrap.min.css -P data/
          wget https://raw.githubusercontent.com/twbs/bootstrap/v5.3.2/dist/js/bootstrap.bundle.min.js -P data/

      # --- Build All Components ---
      - name: Build firmware for esp32dev_8_channel
        run: pio run -e esp32dev_8_channel
      - name: Build firmware for xiao_c6_6channel
        run: pio run -e xiao_c6_6channel
      - name: Build Filesystem Image (shared)
        run: pio run --target buildfs -e esp32dev_8_channel

      - name: Prepare Release and Deploy Assets
        run: |
          mkdir -p deploy
          mkdir -p deploy/release_assets
          
          # Copy binaries to deploy folder
          cp .pio/build/esp32dev_8_channel/firmware.bin deploy/release_assets/firmware-esp32dev_8_channel.bin
          cp .pio/build/esp32dev_8_channel/bootloader.bin deploy/release_assets/bootloader-esp32dev_8_channel.bin
          cp .pio/build/esp32dev_8_channel/partitions.bin deploy/release_assets/partitions-esp32dev_8_channel.bin
          cp .pio/build/xiao_c6_6channel/firmware.bin deploy/release_assets/firmware-xiao_c6_6channel.bin
          cp .pio/build/xiao_c6_6channel/bootloader.bin deploy/release_assets/bootloader-xiao_c6_6channel.bin
          cp .pio/build/xiao_c6_6channel/partitions.bin deploy/release_assets/partitions-xiao_c6_6channel.bin
          cp .pio/build/esp32dev_8_channel/littlefs.bin deploy/release_assets/littlefs.bin

          # Copy web flasher to deploy folder
          cp web_flasher.html deploy/

          # Create manifests in deploy folder
          echo '{' > deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '  "name": "Drink Crafter (ESP32 DevKit)",' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '  "builds": [' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '    {' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '      "chipFamily": "ESP32",' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '      "parts": [' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '        { "path": "bootloader-esp32dev_8_channel.bin", "offset": 4096 },' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '        { "path": "partitions-esp32dev_8_channel.bin", "offset": 32768 },' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '        { "path": "firmware-esp32dev_8_channel.bin", "offset": 65536 },' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '        { "path": "littlefs.bin", "offset": 2686976 }' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '      ]' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '    }' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '  ]' >> deploy/release_assets/manifest-esp32dev_8_channel.json
          echo '}' >> deploy/release_assets/manifest-esp32dev_8_channel.json

          echo '{' > deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '  "name": "Drink Crafter (XIAO C6)",' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '  "builds": [' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '    {' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '      "chipFamily": "ESP32-C6",' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '      "parts": [' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '        { "path": "bootloader-xiao_c6_6channel.bin", "offset": 0 },' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '        { "path": "partitions-xiao_c6_6channel.bin", "offset": 32768 },' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '        { "path": "firmware-xiao_c6_6channel.bin", "offset": 65536 },' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '        { "path": "littlefs.bin", "offset": 2686976 }' >> release_assets/manifest-xiao_c6_6channel.json
          echo '      ]' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '    }' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '  ]' >> deploy/release_assets/manifest-xiao_c6_6channel.json
          echo '}' >> deploy/release_assets/manifest-xiao_c6_6channel.json

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: |
            Automated release for ${{ github.ref }}.
            
            Use the [Web Flasher](https://renebohne.github.io/drink_crafter/web_flasher.html) to install.
            
            The attached assets are the individual components for each board.
          files: deploy/release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
